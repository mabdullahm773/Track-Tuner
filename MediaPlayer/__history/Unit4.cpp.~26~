// Unit4.cpp
//---------------------------------------------------------------------------

#include <fmx.h>
#include <FMX.Media.hpp>
#include <cstdlib>
#include <FMX.ImgList.hpp>
#pragma hdrstop

#include "Unit4.h"
#include <System.IOUtils.hpp>

//---------------------------------------------------------------------------

#pragma package(smart_init)
#pragma resource "*.fmx"
TForm4 *Form4;

//---------------------------------------------------------------------------

__fastcall TForm4::TForm4(TComponent* Owner)
	: TForm(Owner)
{
	CheckStop = false;
	CheckLoop = false;
	CheckShuffle = false;
	VolForward = false;
	VolBackward = false;
	BackgroundImage->Enabled = false;

	LabelDirectory->TextSettings->FontColor = TAlphaColorRec::White;
	ShowMessage("Project - Media Player");
}

//---------------------------------------------------------------------------

void __fastcall TForm4::PopulateListBoxWithSongs()
{
	ListBox1->Items->Clear();
	// Clear existing items
	// Specify the path to your songs folder
	AnsiString folderPath = FolderDirectory;

	TSearchRec searchRec;
	AnsiString searchPath = IncludeTrailingPathDelimiter(folderPath) + "*.mp3";

	if (FindFirst(searchPath, faAnyFile, searchRec) == 0) {
		do {
			ListBox1->Items->Add(searchRec.Name);
		} while (FindNext(searchRec) == 0);
	}

	FindClose(searchRec);
}

//---------------------------------------------------------------------------

void __fastcall TForm4::PlaySelectedSong()
{
	// Specify the path to your songs folder
	AnsiString folderPath = FolderDirectory;

	// Specify the full path to the selected song
	AnsiString selectedSongPath = IncludeTrailingPathDelimiter(folderPath) + FPlayingSongName;

	MediaPlayer1->FileName = selectedSongPath;
	UpdateSongNameLabel();
	MediaPlayer1->Play();
}

//---------------------------------------------------------------------------

void __fastcall TForm4::FindClick(TObject *Sender)
{
// Get the directory path from the TEdit
	FolderDirectory = Directory->Text;

    // Check if the directory exists
	if (DirectoryExists(FolderDirectory))
	{

	ShowMessage("Welcome To Track Tuner.");
	BackgroundImage->Enabled = true;
	ButtonBack15->Visible = true;
	ButtonForward15->Visible = true;
	ButtonBackward->Visible = true;
	ButtonForward->Visible = true;
	ButtonBackward->Visible = true;
	ButtonFullVol->Visible = true;
	ButtonMuteVol->Visible = true;
	ButtonPlayPause->Visible = true;
	ButtonShuffle->Visible = true;
	ButtonLoop->Visible = true;
	TrackBar1->Visible = true;
	TrackBar2->Visible = true;
	song_name->Visible = true;
	ListBox1->Visible = true;
	MediaPlayerName->Visible = true;
	IconImage->Visible = true;
	BackgroundImage->Visible = true;
	Find->Visible = false;
	Directory->Visible = false;
	LabelDirectory->Visible = false;
        /////////////////////////////////////////////////////////////////////////
		MediaPlayerName->Font->Size = 18;
		MediaPlayerName->TextSettings->FontColor = TAlphaColorRec::White;
		song_name->TextSettings->FontColor = TAlphaColorRec::White;

		TImage *ImagePlayPause = new TImage(this);
		ImagePlayPause->Bitmap->LoadFromFile("D:\\University Data\\C++ Builder Embarcadero\\C++ Builder Files\\MediaPlayer\\play.png");
		ImagePlayPause->HitTest = false;
		ImagePlayPause->WrapMode = TImageWrapMode::Fit;

		TImage *ImageForward = new TImage(this);
		ImageForward->Bitmap->LoadFromFile("D:\\University Data\\C++ Builder Embarcadero\\C++ Builder Files\\MediaPlayer\\next.png");
		ImageForward->HitTest = false;
		ImageForward->WrapMode = TImageWrapMode::Fit;

		TImage *ImageBackward = new TImage(this);
		ImageBackward->Bitmap->LoadFromFile("D:\\University Data\\C++ Builder Embarcadero\\C++ Builder Files\\MediaPlayer\\previous.png");
		ImageBackward->HitTest = false;
		ImageBackward->WrapMode = TImageWrapMode::Fit;

		TImage *ImageBackward15 = new TImage(this);
		ImageBackward15->Bitmap->LoadFromFile("D:\\University Data\\C++ Builder Embarcadero\\C++ Builder Files\\MediaPlayer\\backward15.png");
		ImageBackward15->HitTest = false;
		ImageBackward15->WrapMode = TImageWrapMode::Fit;

		TImage *ImageForward15 = new TImage(this);
		ImageForward15->Bitmap->LoadFromFile("D:\\University Data\\C++ Builder Embarcadero\\C++ Builder Files\\MediaPlayer\\forward15.png");
		ImageForward15->HitTest = false;
		ImageForward15->WrapMode = TImageWrapMode::Fit;

		TImage *ImageShuffle = new TImage(this);
		ImageShuffle->Bitmap->LoadFromFile("D:\\University Data\\C++ Builder Embarcadero\\C++ Builder Files\\MediaPlayer\\shuffle.png");
		ImageShuffle->HitTest = false;
		ImageShuffle->WrapMode = TImageWrapMode::Fit;

		TImage *Imageloop = new TImage(this);
		Imageloop->Bitmap->LoadFromFile("D:\\University Data\\C++ Builder Embarcadero\\C++ Builder Files\\MediaPlayer\\loop.png");
		Imageloop->HitTest = false;
		Imageloop->WrapMode = TImageWrapMode::Fit;

		TImage *ImageVolup = new TImage(this);
		ImageVolup->Bitmap->LoadFromFile("D:\\University Data\\C++ Builder Embarcadero\\C++ Builder Files\\MediaPlayer\\volup.png");
		ImageVolup->HitTest = false;
		ImageVolup->WrapMode = TImageWrapMode::Fit;

		TImage *ImageVoldown = new TImage(this);
		ImageVoldown->Bitmap->LoadFromFile("D:\\University Data\\C++ Builder Embarcadero\\C++ Builder Files\\MediaPlayer\\voldown.png");
		ImageVoldown->HitTest = false;
		ImageVoldown->WrapMode = TImageWrapMode::Fit;


		// Optionally, handle click events for the images
		ImagePlayPause->OnClick = ButtonPlayPauseClick;
		// Replace with your actual event handler
		ImageForward->OnClick = ButtonForwardClick;
		// Replace with your actual event handler
		ImageBackward->OnClick = ButtonBackwardClick;
		// Replace with your actual event handler
		ImageBackward15->OnClick = ButtonBack15Click;
		// Replace with your actual event handler
		ImageForward15->OnClick = ButtonForward15Click;
		// Replace with your actual event handler
		ImageShuffle->OnClick = ButtonShuffleClick;
		// Replace with your actual event handler
		Imageloop->OnClick = ButtonLoopClick;
		// Replace with your actual event handler
		ImageVolup->OnClick = ButtonFullVolClick;
		// Replace with your actual event handler
		ImageVoldown->OnClick = ButtonMuteVolClick;
		// Replace with your actual event handler

		// Position the TImage components on top of the buttons without changing button size
		ImagePlayPause->Position->X = ButtonPlayPause->Position->X;
		ImagePlayPause->Position->Y = ButtonPlayPause->Position->Y;
		ImagePlayPause->Width = ButtonPlayPause->Width;
		ImagePlayPause->Height = ButtonPlayPause->Height;
		ImagePlayPause->Parent = this;

		ImageForward->Position->X = ButtonForward->Position->X;
		ImageForward->Position->Y = ButtonForward->Position->Y;
		ImageForward->Width = ButtonForward->Width;
		ImageForward->Height = ButtonForward->Height;
		ImageForward->Parent = this;

		ImageBackward->Position->X = ButtonBackward->Position->X;
		ImageBackward->Position->Y = ButtonBackward->Position->Y;
		ImageBackward->Width = ButtonBackward->Width;
		ImageBackward->Height = ButtonBackward->Height;
		ImageBackward->Parent = this;

		ImageBackward15->Position->X = ButtonBack15->Position->X;
		ImageBackward15->Position->Y = ButtonBack15->Position->Y;
		ImageBackward15->Width = ButtonBack15->Width;
		ImageBackward15->Height = ButtonBack15->Height;
		ImageBackward15->Parent = this;

		ImageForward15->Position->X = ButtonForward15->Position->X;
		ImageForward15->Position->Y = ButtonForward15->Position->Y;
		ImageForward15->Width = ButtonForward15->Width;
		ImageForward15->Height = ButtonForward15->Height;
		ImageForward15->Parent = this;

		ImageShuffle->Position->X = ButtonShuffle->Position->X;
		ImageShuffle->Position->Y = ButtonShuffle->Position->Y;
		ImageShuffle->Width = ButtonShuffle->Width;
		ImageShuffle->Height = ButtonShuffle->Height;
		ImageShuffle->Parent = this;

		Imageloop->Position->X = ButtonLoop->Position->X;
		Imageloop->Position->Y = ButtonLoop->Position->Y;
		Imageloop->Width = ButtonLoop->Width;
		Imageloop->Height = ButtonLoop->Height;
		Imageloop->Parent = this;

		ImageVolup->Position->X = ButtonFullVol->Position->X;
		ImageVolup->Position->Y = ButtonFullVol->Position->Y;
		ImageVolup->Width = ButtonFullVol->Width;
		ImageVolup->Height = ButtonFullVol->Height;
		ImageVolup->Parent = this;

		ImageVoldown->Position->X = ButtonMuteVol->Position->X;
		ImageVoldown->Position->Y = ButtonMuteVol->Position->Y;
		ImageVoldown->Width = ButtonMuteVol->Width;
		ImageVoldown->Height = ButtonMuteVol->Height;
		ImageVoldown->Parent = this;

		//////////////////////////////////////////////////////////////////
	// Song Name displaying
	UpdateSongNameLabel();

	// Connect the TrackBar1Change event
	TrackBar1->OnChange = TrackBar1Change;
	FShouldUpdateVolume = true;

	// Set the Images property of the button to the ImageList
	ButtonPlayPause->Images = ImageList;
	ButtonForward->Images = ImageList;
	ButtonBackward->Images = ImageList;

	// Set the ImageIndex property of the button to specify which image to display
	ButtonPlayPause->ImageIndex = 0; // Index of the play-button.png in the ImageList
	ButtonForward->ImageIndex = 2;   // Index of the forward-button.png in the ImageList
	ButtonBackward->ImageIndex = 3;  // Index of the backward-button.png in the ImageList

	/////////////////////////////////////////////////////////
		// Directory exists
		PopulateListBoxWithSongs();

		// Specify the path to your image file
		UnicodeString backgroundimage = "D:\\University Data\\C++ Builder Embarcadero\\C++ Builder Files\\MediaPlayer\\background.png";

		// Create a TBitmap instance
		TBitmap *backgroundimageBitmap = new TBitmap();

		// Load the image from file
		backgroundimageBitmap->LoadFromFile(backgroundimage);

		// Assign the loaded bitmap to the Image component
		BackgroundImage->Bitmap->Assign(backgroundimageBitmap);

		/////////////////////////////////////////////////////////////////////////

		// Specify the path to your image file
		UnicodeString iconimage = "D:\\University Data\\C++ Builder Embarcadero\\C++ Builder Files\\MediaPlayer\\icon.png";

		// Create a TBitmap instance
		TBitmap *iconimageBitmap = new TBitmap();

		// Load the image from file
		iconimageBitmap->LoadFromFile(iconimage);

		// Assign the loaded bitmap to the Image component
		IconImage->Bitmap->Assign(iconimageBitmap);
	}
	else
	{
		// Directory does not exist
		ShowMessage("Directory Does Not Exist.");
	}
}

//---------------------------------------------------------------------------

void __fastcall TForm4::ListBox1ItemClick(TCustomListBox * const Sender, TListBoxItem * const Item)
{
	FPlayingSongName = Item->Text;
	PlaySelectedSong();
	Timer1->Enabled = true;
	// Start the timer when a new song starts playing
}

//---------------------------------------------------------------------------

void __fastcall TForm4::Timer1Timer(TObject *Sender)
{
	// Update the position of the TrackBar based on the current position of the song
	if (MediaPlayer1->Media != NULL) {
		TrackBar2->Max = MediaPlayer1->Media->Duration;
		TrackBar2->Value = MediaPlayer1->CurrentTime;
	}
	// Check if the media has stopped (song has ended)
	if (MediaPlayer1->State == TMediaState::Stopped && CheckLoop == false && CheckStop == false)
	{
		// Automatically play the next song if available
		PlayNextSong();
	}
	else if(MediaPlayer1->State == TMediaState::Stopped && CheckLoop == true && CheckStop == false){
	   PlaySameSong();
	}
}

//---------------------------------------------------------------------------

void __fastcall TForm4::TrackBar2Change(TObject *Sender)
{
	// Set the position of the song based on the value of the TrackBar
	if (!TrackBar2->IsMouseOver)
	{
		MediaPlayer1->CurrentTime = TrackBar2->Value;
	}
}

//---------------------------------------------------------------------------

void __fastcall TForm4::ButtonPlayPauseClick(TObject *Sender)
{
	FShouldUpdateVolume = false; // Disable volume update during playback control
	if (MediaPlayer1->State == TMediaState::Playing)
	{
		CheckStop = true;
		MediaPlayer1->Stop(); // Stop instead of Pause
	}
	else if (MediaPlayer1->State == TMediaState::Stopped)
	{
		CheckStop = false;
		MediaPlayer1->Play();
	}
	FShouldUpdateVolume = true;
}

//---------------------------------------------------------------------------

void __fastcall TForm4::ButtonBackwardClick(TObject *Sender)
{
   // Implement logic for the "Previous Song" button
	// For example, you can navigate to the previous song in the playlist

	// If there is a selected item in the ListBox
	if (ListBox1->ItemIndex > 0)
	{
		// Move to the previous item in the list
		ListBox1->ItemIndex = ListBox1->ItemIndex - 1;

		// Play the selected song
		FPlayingSongName = ListBox1->Items->Strings[ListBox1->ItemIndex];
		PlaySelectedSong();
		Timer1->Enabled = true;
	}
}

//---------------------------------------------------------------------------

void __fastcall TForm4::ButtonForwardClick(TObject *Sender)
{
	// Implement logic for the "Next Song" button
	// For example, you can navigate to the next song in the playlist

	// If there is a selected item in the ListBox
	if (ListBox1->ItemIndex < ListBox1->Items->Count - 1)
	{
		// Move to the next item in the list
		ListBox1->ItemIndex = ListBox1->ItemIndex + 1;

		// Play the selected song
		FPlayingSongName = ListBox1->Items->Strings[ListBox1->ItemIndex];
		PlaySelectedSong();
		Timer1->Enabled = true;
	}
}

//---------------------------------------------------------------------------

void __fastcall TForm4::TrackBar1Change(TObject *Sender)
{
    // Set the volume of the MediaPlayer based on the value of the TrackBar
    if (FShouldUpdateVolume)
	{
		MediaPlayer1->Volume = TrackBar1->Value / 100.0;
	}
}

//---------------------------------------------------------------------------

void __fastcall TForm4::UpdateSongNameLabel()
{
    // Check if a song is currently playing
    if (!FPlayingSongName.IsEmpty())
    {
		// Update the text of the song_name label with the current playing song name
		song_name->Text = FPlayingSongName;
    }
    else
    {
        // If no song is playing, clear the label text
		song_name->Text = "";
    }
}

//---------------------------------------------------------------------------

void __fastcall TForm4::MediaPlayer1CurrentTime(TObject *Sender, double ATime)
{
	// Check if the current time has reached the end of the song
	if (ATime >= MediaPlayer1->Media->Duration && CheckLoop && !CheckStop)
	{
		// Automatically play the same song
		PlaySameSong();
	}
	else if (ATime >= MediaPlayer1->Media->Duration && CheckStop)
	{
		// Automatically play the next song if available
		PlayNextSong();
	}
}

//---------------------------------------------------------------------------

void __fastcall TForm4::PlayNextSong()
{
	if (ListBox1->ItemIndex < ListBox1->Items->Count - 1)
	{
		// Move to the next item in the list
		ListBox1->ItemIndex = ListBox1->ItemIndex + 1;

		// Play the selected song
		FPlayingSongName = ListBox1->Items->Strings[ListBox1->ItemIndex];
		PlaySelectedSong();
		Timer1->Enabled = true;
	}
	else
	{
		// If it's the last song, stop playback or handle as needed
		MediaPlayer1->Stop();
	}
}

//---------------------------------------------------------------------------

void __fastcall TForm4::MediaPlayer1Time(TObject *Sender, const TMediaTime ATime, const TMediaTime ADuration)
{
	// Check if the current time has reached the end of the song
	if (ATime >= ADuration)
	{
		// Automatically play the next song if available
		PlayNextSong();
	}
}

//---------------------------------------------------------------------------


void __fastcall TForm4::ButtonLoopClick(TObject *Sender)
{
	if(!CheckLoop){
		CheckLoop = true;
		ButtonLoop->StaysPressed = true;
	}
	else if(CheckLoop){
		CheckLoop = false;
		ButtonLoop->StaysPressed = false;
	}
}

//---------------------------------------------------------------------------

void __fastcall TForm4::PlaySameSong()
{
	// If looping is enabled, set the ListBox index back to the current song
	ListBox1->ItemIndex = ListBox1->ItemIndex-1;
	PlayNextSong();
}


//---------------------------------------------------------------------------

void __fastcall TForm4::ButtonFullVolDoubleClick(TObject *Sender)
{
	// Set the volume to maximum
	TrackBar1->Value = 100; // Assuming your TTrackBar range is from 0 to 100
	MediaPlayer1->Volume = TrackBar1->Value / 100.0;
}

//---------------------------------------------------------------------------

void __fastcall TForm4::ButtonMuteVolDoubleClick(TObject *Sender)
{
	// Set the volume to mute
	TrackBar1->Value = 0; // Assuming your TTrackBar range is from 0 to 100
	MediaPlayer1->Volume = TrackBar1->Value / 100.0;
}

//---------------------------------------------------------------------------

void __fastcall TForm4::ButtonFullVolClick(TObject *Sender)
{
	Sleep(300);
	// Set the volume to maximum
	TrackBar1->Value = TrackBar1->Value + 10; // Assuming your TTrackBar range is from 0 to 100
	MediaPlayer1->Volume = TrackBar1->Value / 100.0;
}

//---------------------------------------------------------------------------

void __fastcall TForm4::ButtonMuteVolClick(TObject *Sender)
{
	Sleep(300);
	// Set the volume to mute
	TrackBar1->Value = TrackBar1->Value - 10; // Assuming your TTrackBar range is from 0 to 100
	MediaPlayer1->Volume = TrackBar1->Value / 100.0;
}

//---------------------------------------------------------------------------

void __fastcall TForm4::ButtonBack15Click(TObject *Sender)
{
	if (MediaPlayer1->CurrentTime >= 150000000)
	{
		MediaPlayer1->CurrentTime -= 150000000;
        TrackBar2->Value = MediaPlayer1->CurrentTime;
    }
    else
    {
        MediaPlayer1->CurrentTime = 0;
        TrackBar2->Value = 0;
	}
}

void __fastcall TForm4::ButtonForward15Click(TObject *Sender)
{
	// Move the timeline forward by 15 seconds
	if (MediaPlayer1->CurrentTime + 150000000 <= MediaPlayer1->Media->Duration)
	{
		MediaPlayer1->CurrentTime += 150000000;
		TrackBar2->Value = MediaPlayer1->CurrentTime;
	}
	else
	{
		// If moving forward by 15 seconds exceeds the duration, stop at the end
		MediaPlayer1->CurrentTime = MediaPlayer1->Media->Duration;
		TrackBar2->Value = MediaPlayer1->CurrentTime;
	}
}
//---------------------------------------------------------------------------


void __fastcall TForm4::ButtonShuffleClick(TObject *Sender)
{
	if (!CheckShuffle)
    {
        // Shuffle the items in the main ListBox1 using a custom shuffling algorithm
        int count = ListBox1->Count;
        for (int i = count - 1; i > 0; --i)
        {
            int j = Random(i + 1);

            // Swap the items at positions i and j
            String tempItem = ListBox1->Items->Strings[i];
            ListBox1->Items->Strings[i] = ListBox1->Items->Strings[j];
            ListBox1->Items->Strings[j] = tempItem;
        }

		CheckShuffle = true;
        ButtonShuffle->StaysPressed = true;
    }
    else
    {
        // Restore the original order of items in the main ListBox1
        PopulateListBoxWithSongs();
		CheckShuffle = false;
        ButtonShuffle->StaysPressed = false;
	}
}
//--------------------------------------//ei0aic0-------------------------------------

